#!/bin/bash
#
# Script de Configura√ß√£o - Integra√ß√£o Manus + Claude
# Projeto: Ailun Sa√∫de
#

set -e  # Sair em caso de erro

echo "========================================="
echo "üöÄ SETUP - INTEGRA√á√ÉO MANUS + CLAUDE"
echo "   Projeto: Ailun Sa√∫de"
echo "========================================="
echo ""

# Cores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Verificar Python
echo -e "${BLUE}üîç Verificando Python...${NC}"
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}‚ùå Python 3 n√£o encontrado. Por favor, instale Python 3.8+${NC}"
    exit 1
fi

PYTHON_VERSION=$(python3 --version | cut -d ' ' -f 2)
echo -e "${GREEN}‚úÖ Python $PYTHON_VERSION encontrado${NC}"
echo ""

# Verificar pip
echo -e "${BLUE}üîç Verificando pip...${NC}"
if ! command -v pip3 &> /dev/null; then
    echo -e "${RED}‚ùå pip3 n√£o encontrado${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ pip3 encontrado${NC}"
echo ""

# Criar ambiente virtual (opcional mas recomendado)
echo -e "${BLUE}üì¶ Criando ambiente virtual...${NC}"
if [ ! -d "venv" ]; then
    python3 -m venv venv
    echo -e "${GREEN}‚úÖ Ambiente virtual criado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Ambiente virtual j√° existe${NC}"
fi
echo ""

# Ativar ambiente virtual
echo -e "${BLUE}üîå Ativando ambiente virtual...${NC}"
source venv/bin/activate
echo -e "${GREEN}‚úÖ Ambiente virtual ativado${NC}"
echo ""

# Instalar depend√™ncias
echo -e "${BLUE}üì• Instalando depend√™ncias...${NC}"
pip install -r requirements.txt
echo -e "${GREEN}‚úÖ Depend√™ncias instaladas${NC}"
echo ""

# Verificar vari√°veis de ambiente
echo -e "${BLUE}üîê Verificando vari√°veis de ambiente...${NC}"
ENV_FILE="../.env"

if [ ! -f "$ENV_FILE" ]; then
    echo -e "${RED}‚ùå Arquivo .env n√£o encontrado em $ENV_FILE${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Por favor, configure as vari√°veis de ambiente${NC}"
    exit 1
fi

# Verificar chaves necess√°rias
REQUIRED_VARS=(
    "ANTHROPIC_API_KEY"
    "EXPO_PUBLIC_SUPABASE_URL"
    "EXPO_PUBLIC_SUPABASE_ANON_KEY"
)

ALL_VARS_SET=true
for var in "${REQUIRED_VARS[@]}"; do
    if ! grep -q "^${var}=" "$ENV_FILE"; then
        echo -e "${RED}‚ùå Vari√°vel $var n√£o encontrada no .env${NC}"
        ALL_VARS_SET=false
    else
        echo -e "${GREEN}‚úÖ $var configurada${NC}"
    fi
done

echo ""

if [ "$ALL_VARS_SET" = false ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Algumas vari√°veis de ambiente est√£o faltando${NC}"
    echo ""
    echo "Por favor, adicione ao arquivo $ENV_FILE:"
    echo ""
    echo "# API Anthropic (Claude)"
    echo "ANTHROPIC_API_KEY=sua_chave_aqui"
    echo ""
    exit 1
fi

# Criar diret√≥rios necess√°rios
echo -e "${BLUE}üìÅ Criando diret√≥rios...${NC}"
mkdir -p reports
mkdir -p logs
echo -e "${GREEN}‚úÖ Diret√≥rios criados${NC}"
echo ""

# Testar conex√£o com Claude
echo -e "${BLUE}üß™ Testando conex√£o com Claude...${NC}"
python3 << EOF
import os
import sys
sys.path.insert(0, './scripts')
from dotenv import load_dotenv
load_dotenv('../.env')

try:
    from claude_client import ClaudeClient
    client = ClaudeClient()
    response = client.generate_text("Diga 'OK' se voc√™ est√° funcionando corretamente.")
    print(f"‚úÖ Claude respondeu: {response[:50]}...")
    sys.exit(0)
except Exception as e:
    print(f"‚ùå Erro ao conectar com Claude: {e}")
    sys.exit(1)
EOF

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Conex√£o com Claude OK${NC}"
else
    echo -e "${RED}‚ùå Falha na conex√£o com Claude${NC}"
    exit 1
fi
echo ""

# Testar conex√£o com Supabase
echo -e "${BLUE}üß™ Testando conex√£o com Supabase...${NC}"
python3 << EOF
import os
import sys
sys.path.insert(0, './scripts')
from dotenv import load_dotenv
load_dotenv('../.env')

try:
    from supabase import create_client
    url = os.getenv("EXPO_PUBLIC_SUPABASE_URL")
    key = os.getenv("EXPO_PUBLIC_SUPABASE_ANON_KEY")
    client = create_client(url, key)
    print("‚úÖ Conex√£o com Supabase estabelecida")
    sys.exit(0)
except Exception as e:
    print(f"‚ùå Erro ao conectar com Supabase: {e}")
    sys.exit(1)
EOF

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Conex√£o com Supabase OK${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Aviso: Falha na conex√£o com Supabase (pode ser normal se RLS estiver ativo)${NC}"
fi
echo ""

# Tornar scripts execut√°veis
echo -e "${BLUE}üîß Configurando permiss√µes de scripts...${NC}"
chmod +x scripts/*.py
chmod +x examples/*.sh
chmod +x examples/*.py
echo -e "${GREEN}‚úÖ Permiss√µes configuradas${NC}"
echo ""

# Mensagem final
echo "========================================="
echo -e "${GREEN}‚úÖ SETUP CONCLU√çDO COM SUCESSO!${NC}"
echo "========================================="
echo ""
echo "üìö Pr√≥ximos passos:"
echo ""
echo "1. ${BLUE}Testar integra√ß√£o b√°sica:${NC}"
echo "   python scripts/claude_client.py"
echo ""
echo "2. ${BLUE}Executar exemplo de automa√ß√£o:${NC}"
echo "   python examples/example_daily_automation.py"
echo ""
echo "3. ${BLUE}Iniciar servidor MCP:${NC}"
echo "   python scripts/mcp_server.py"
echo ""
echo "4. ${BLUE}Iniciar scheduler de automa√ß√µes:${NC}"
echo "   python scripts/automation_scheduler.py"
echo ""
echo "5. ${BLUE}Executar automa√ß√£o espec√≠fica:${NC}"
echo "   python scripts/automation_scheduler.py daily"
echo ""
echo "üìñ Documenta√ß√£o completa: docs/INTEGRATION_GUIDE.md"
echo ""
echo "üí° Para desativar o ambiente virtual: deactivate"
echo "üí° Para reativar: source venv/bin/activate"
echo ""
