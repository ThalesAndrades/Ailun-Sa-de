import AsyncStorage from '@react-native-async-storage/async-storage';
import { getBeneficiaryByCPF } from './rapidoc';

const AUTH_KEY = '@ailun_auth';

export interface AuthSession {
  beneficiaryUuid: string;
  cpf: string;
  name: string;
  email: string;
  phone: string;
  isAuthenticated: boolean;
  loginDate: string;
}

/**
 * Valida se a senha corresponde aos 4 primeiros d√≠gitos do CPF
 */
const validatePassword = (cpf: string, password: string): boolean => {
  // Garantir que ambos s√£o strings
  const cpfString = String(cpf || '').replace(/\D/g, ''); 
  const passwordString = String(password || '');
  
  console.log('üîê [validatePassword] Validando senha');
  console.log('üìã CPF fornecido:', cpfString);
  console.log('üîë Senha fornecida:', passwordString);
  
  if (cpfString.length < 4) {
    console.log('‚ùå CPF muito curto para valida√ß√£o:', cpfString.length);
    return false;
  }
  
  const first4Digits = cpfString.substring(0, 4);
  const isValid = passwordString === first4Digits;
  
  console.log('üî¢ Primeiros 4 d√≠gitos do CPF:', first4Digits);
  console.log('‚úÖ Senhas coincidem:', isValid);
  
  return isValid;
};

/**
 * Valida formato b√°sico do CPF (11 d√≠gitos)
 */
const validateCPFFormat = (cpf: string): boolean => {
  // Garantir que √© string e limpar
  const cpfString = String(cpf || '').trim();
  const cleaned = cpfString.replace(/\D/g, '');
  const isValid = cleaned.length === 11;
  
  console.log('üìã [validateCPFFormat] Validando formato do CPF');
  console.log('üìÑ CPF original:', cpfString);
  console.log('üßπ CPF limpo:', cleaned);
  console.log('üìè Comprimento:', cleaned.length);
  console.log('‚úÖ Formato v√°lido:', isValid);
  
  return isValid;
};

/**
 * Realiza login com CPF e senha
 */
export const loginWithCPF = async (cpf: string, password: string) => {
  try {
    console.log('üöÄ [loginWithCPF] ========== INICIANDO PROCESSO DE LOGIN ==========');
    console.log('üìÑ CPF recebido:', cpf, '(tipo:', typeof cpf, ')');
    console.log('üîë Senha recebida:', password, '(tipo:', typeof password, ')');
    
    // 1. Garantir que s√£o strings e limpar CPF
    const cpfString = String(cpf || '').trim();
    const passwordString = String(password || '').trim();
    const cleanCPF = cpfString.replace(/\D/g, '');
    
    console.log('üßπ Dados processados:');
    console.log('  - CPF string:', cpfString);
    console.log('  - CPF limpo:', cleanCPF);
    console.log('  - Senha string:', passwordString);

    // 2. Valida√ß√µes b√°sicas
    console.log('üîç Executando valida√ß√µes b√°sicas...');
    
    if (!cpfString) {
      console.log('‚ùå Valida√ß√£o falhou: CPF vazio');
      return {
        success: false,
        error: 'CPF √© obrigat√≥rio.',
      };
    }

    if (!passwordString) {
      console.log('‚ùå Valida√ß√£o falhou: Senha vazia');
      return {
        success: false,
        error: 'Senha √© obrigat√≥ria.',
      };
    }

    // 3. Validar formato do CPF
    console.log('üìã Validando formato do CPF...');
    if (!validateCPFFormat(cleanCPF)) {
      console.log('‚ùå Valida√ß√£o falhou: Formato de CPF inv√°lido');
      return {
        success: false,
        error: `CPF deve ter exatamente 11 d√≠gitos. Atual: ${cleanCPF.length} d√≠gitos.`,
      };
    }
    console.log('‚úÖ Formato do CPF v√°lido');

    // 4. Validar senha (4 primeiros d√≠gitos do CPF)
    console.log('üîê Validando senha...');
    if (!validatePassword(cleanCPF, passwordString)) {
      console.log('‚ùå Valida√ß√£o falhou: Senha incorreta');
      return {
        success: false,
        error: 'Senha incorreta. A senha deve ser os 4 primeiros d√≠gitos do CPF.',
      };
    }
    console.log('‚úÖ Senha v√°lida');

    console.log('üåê Todas as valida√ß√µes passaram, buscando benefici√°rio na RapiDoc...');
    
    // 5. Buscar benefici√°rio na RapiDoc
    const beneficiaryResult = await getBeneficiaryByCPF(cleanCPF);
    
    console.log('üìä [loginWithCPF] Resultado da busca na RapiDoc:');
    console.log('  - Success:', beneficiaryResult.success);
    console.log('  - Error:', beneficiaryResult.error);
    console.log('  - Data:', beneficiaryResult.data);

    if (!beneficiaryResult.success) {
      console.log('‚ùå Benefici√°rio n√£o encontrado na RapiDoc');
      console.log('üìÑ Mensagem de erro:', beneficiaryResult.error);
      
      // Mapear tipos de erro para mensagens mais amig√°veis
      let errorMessage = beneficiaryResult.error || 'CPF n√£o encontrado no sistema.';
      
      if (errorMessage.includes('conex√£o') || errorMessage.includes('network')) {
        errorMessage = 'Erro de conex√£o. Verifique sua internet e tente novamente.';
      } else if (errorMessage.includes('timeout')) {
        errorMessage = 'Timeout na conex√£o. Tente novamente.';
      } else if (errorMessage.includes('servidor') || errorMessage.includes('server')) {
        errorMessage = 'Erro no servidor. Tente novamente mais tarde.';
      }
      
      return {
        success: false,
        error: errorMessage,
      };
    }

    const beneficiary = beneficiaryResult.data;
    console.log('‚úÖ Benefici√°rio encontrado na RapiDoc:');
    console.log('  - UUID:', beneficiary.uuid);
    console.log('  - Nome:', beneficiary.name);
    console.log('  - CPF:', beneficiary.cpf);
    console.log('  - Email:', beneficiary.email);
    console.log('  - Status:', beneficiary.status);

    // 6. Verificar se o benefici√°rio est√° ativo
    if (beneficiary.status && beneficiary.status !== 'active') {
      console.log('‚ùå Benefici√°rio inativo, status:', beneficiary.status);
      return {
        success: false,
        error: 'Benefici√°rio inativo. Entre em contato com o suporte.',
      };
    }
    console.log('‚úÖ Benefici√°rio est√° ativo ou sem status definido');

    // 7. Criar sess√£o local
    console.log('üíæ Criando sess√£o local...');
    const session: AuthSession = {
      beneficiaryUuid: beneficiary.uuid,
      cpf: cleanCPF,
      name: beneficiary.name,
      email: beneficiary.email || '',
      phone: beneficiary.phone || '',
      isAuthenticated: true,
      loginDate: new Date().toISOString(),
    };

    console.log('üìù Sess√£o criada:', {
      beneficiaryUuid: session.beneficiaryUuid,
      cpf: session.cpf,
      name: session.name,
      email: session.email,
      loginDate: session.loginDate
    });

    await AsyncStorage.setItem(AUTH_KEY, JSON.stringify(session));
    console.log('üíæ Sess√£o salva no AsyncStorage');

    console.log('üéâ [loginWithCPF] ========== LOGIN REALIZADO COM SUCESSO ==========');
    return {
      success: true,
      data: session,
    };
  } catch (error) {
    console.error('üí• [loginWithCPF] ========== ERRO NO PROCESSO DE LOGIN ==========');
    console.error('‚ùå Erro:', error);
    console.error('üîç Detalhes:', {
      message: error instanceof Error ? error.message : 'Erro desconhecido',
      name: error instanceof Error ? error.name : 'Erro',
      stack: error instanceof Error ? error.stack?.substring(0, 500) : 'N/A'
    });
    
    return {
      success: false,
      error: 'Erro ao realizar login. Verifique sua conex√£o e tente novamente.',
    };
  }
};

/**
 * Obt√©m a sess√£o atual do usu√°rio
 */
export const getCurrentSession = async (): Promise<AuthSession | null> => {
  try {
    const sessionData = await AsyncStorage.getItem(AUTH_KEY);
    if (!sessionData) return null;

    const session: AuthSession = JSON.parse(sessionData);
    return session;
  } catch (error) {
    console.error('Erro ao obter sess√£o:', error);
    return null;
  }
};

/**
 * Verifica se o usu√°rio est√° autenticado
 */
export const isAuthenticated = async (): Promise<boolean> => {
  const session = await getCurrentSession();
  return session?.isAuthenticated || false;
};

/**
 * Realiza logout
 */
export const logout = async () => {
  try {
    await AsyncStorage.removeItem(AUTH_KEY);
    return { success: true };
  } catch (error) {
    console.error('Erro ao fazer logout:', error);
    return { success: false, error: 'Erro ao fazer logout.' };
  }
};

/**
 * Atualiza dados da sess√£o
 */
export const updateSession = async (updates: Partial<AuthSession>) => {
  try {
    const currentSession = await getCurrentSession();
    if (!currentSession) {
      return { success: false, error: 'Nenhuma sess√£o ativa.' };
    }

    const updatedSession = { ...currentSession, ...updates };
    await AsyncStorage.setItem(AUTH_KEY, JSON.stringify(updatedSession));

    return { success: true, data: updatedSession };
  } catch (error) {
    console.error('Erro ao atualizar sess√£o:', error);
    return { success: false, error: 'Erro ao atualizar sess√£o.' };
  }
};

/**
 * Formata CPF para exibi√ß√£o (123.456.789-00)
 */
export const formatCPF = (cpf: string): string => {
  const cleaned = cpf.replace(/\D/g, '');
  return cleaned
    .replace(/(\d{3})(\d)/, '$1.$2')
    .replace(/(\d{3})(\d)/, '$1.$2')
    .replace(/(\d{3})(\d{1,2})$/, '$1-$2');
};